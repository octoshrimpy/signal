name: Build Tauri Linux packages

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create a GitHub Release and attach the built artifacts"
        required: false
        default: false
        type: boolean
      release_tag:
        description: "Release tag (only used if create_release is true). Example: v0.1.0"
        required: false
        type: string
      release_name:
        description: "Release name (optional; defaults to tag or autogenerated)"
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: tauri-linux-${{ github.ref }}
  cancel-in-progress: false

env:
  CI: true

jobs:
  ubuntu-appimage-deb:
    name: Build AppImage and DEB (Ubuntu)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        shell: bash
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config libssl-dev librsvg2-dev patchelf \
            curl git ca-certificates
          # Prefer WebKitGTK 4.1 (Ubuntu 24.04+), fallback to 4.0 (22.04)
          if sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev; then
            echo "Installed WebKitGTK 4.1 and ayatana appindicator"
          else
            sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev
          fi

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true

      - name: Enable Corepack (Yarn/Pnpm)
        run: corepack enable

      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          set -eux
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "install=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=pnpm build" >> $GITHUB_OUTPUT
            corepack prepare pnpm@latest --activate
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "install=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=yarn build" >> $GITHUB_OUTPUT
            corepack prepare yarn@stable --activate
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=npm ci" >> $GITHUB_OUTPUT
            echo "build=npm run build" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=npm install" >> $GITHUB_OUTPUT
            echo "build=npm run build" >> $GITHUB_OUTPUT
          fi

      - name: Restore Node cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            ~/.pnpm-store
          key: node-${{ steps.pm.outputs.manager }}-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml', '**/yarn.lock', '**/package-lock.json') }}

      - name: Install frontend dependencies
        run: ${{ steps.pm.outputs.install }}

      - name: Build frontend
        run: ${{ steps.pm.outputs.build }}

      # - name: Ensure .env exists if required
      #   run: cp .env.example .env # Uncomment if you use .env for build

      - name: Bootstrap minimal Tauri wrapper if missing (AppImage+DEB)
        shell: bash
        run: |
          set -eux
          if [ -d src-tauri ]; then
            echo "src-tauri exists; skipping bootstrap."
            exit 0
          fi

          # Detect built frontend output directory
          DIST_DIR="dist"
          if [ -d "build" ]; then DIST_DIR="build"; fi
          if [ ! -d "$DIST_DIR" ]; then
            echo "::error::Could not find built frontend directory (dist or build). Ensure your build step outputs one of these."
            exit 1
          fi

          mkdir -p src-tauri/src

          # Write Tauri config for Ubuntu job (AppImage + DEB)
          cat > src-tauri/tauri.conf.json <<'JSON'
          {
            "$schema": "https://schema.tauri.app/config/2",
            "productName": "Signal",
            "version": "0.1.0",
            "identifier": "app.signalmidi.desktop",
            "build": {
              "beforeDevCommand": "npm run dev",
              "beforeBuildCommand": "npm run build"
              // No devPath or distDir here!
            },
            "app": {
              "windows": [
                { "title": "Signal", "width": 1280, "height": 800, "resizable": true }
              ],
              "security": {
                "csp": "default-src 'self' 'unsafe-inline' 'unsafe-eval' blob: data: filesystem: ws: wss: http: https:"
              }
            },
            "bundle": {
              "targets": ["appimage", "deb"],
              "icon": [],
              "linux": {
                "deb": {
                  "depends": [
                    "libwebkit2gtk-4.1-0 | libwebkit2gtk-4.0-37",
                    "libayatana-appindicator3-1 | libappindicator3-1",
                    "librsvg2-2",
                    "openssl"
                  ]
                }
              }
            }
          }
          JSON

          # Cargo.toml
          cat > src-tauri/Cargo.toml <<'TOML'
          [package]
          name = "signal-tauri"
          version = "0.1.0"
          description = "Signal MIDI Editor (Tauri wrapper)"
          edition = "2021"

          [build-dependencies]
          tauri-build = "2"

          [dependencies]
          tauri = { version = "2", features = ["protocol-asset"] }
          serde = { version = "1", features = ["derive"] }
          serde_json = "1"

          [profile.release]
          lto = true
          codegen-units = 1
          strip = "symbols"
          TOML

          # main.rs
          cat > src-tauri/src/main.rs <<'RS'
          fn main() {
              tauri::Builder::default()
                  .run(tauri::generate_context!())
                  .expect("error while running tauri application");
          }
          RS

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: cargo-${{ runner.os }}-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Build Tauri (AppImage, DEB)
        run: npx @tauri-apps/cli@latest build
        env:
          TAURI_BUILD_ENVIRONMENT: production

      - name: Upload AppImage and DEB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-linux-ubuntu
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
          if-no-files-found: warn
          retention-days: 14

  fedora-rpm:
    name: Build RPM (Fedora container)
    runs-on: ubuntu-latest
    container:
      image: registry.fedoraproject.org/fedora:40

    steps:
      - name: Install base tools (Fedora)
        run: |
          dnf -y upgrade --refresh
          dnf -y groupinstall "Development Tools"
          dnf -y install \
            git curl ca-certificates bash which findutils \
            webkit2gtk4.1-devel libappindicator-gtk3-devel librsvg2-devel openssl-devel \
            rpm-build rpmdevtools pkgconfig

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true

      - name: Enable Corepack (Yarn/Pnpm)
        run: corepack enable

      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          set -eux
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "install=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=pnpm build" >> $GITHUB_OUTPUT
            corepack prepare pnpm@latest --activate
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "install=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=yarn build" >> $GITHUB_OUTPUT
            corepack prepare yarn@stable --activate
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=npm ci" >> $GITHUB_OUTPUT
            echo "build=npm run build" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=npm install" >> $GITHUB_OUTPUT
            echo "build=npm run build" >> $GITHUB_OUTPUT
          fi

      - name: Install frontend dependencies
        run: ${{ steps.pm.outputs.install }}

      - name: Build frontend
        run: ${{ steps.pm.outputs.build }}

      # - name: Ensure .env exists if required
      #   run: cp .env.example .env # Uncomment if you use .env for build

      - name: Bootstrap minimal Tauri wrapper if missing (RPM)
        shell: bash
        run: |
          set -eux
          if [ -d src-tauri ]; then
            echo "src-tauri exists; skipping bootstrap."
            exit 0
          fi

          DIST_DIR="dist"
          if [ -d "build" ]; then DIST_DIR="build"; fi
          if [ ! -d "$DIST_DIR" ]; then
            echo "::error::Could not find built frontend directory (dist or build). Ensure your build step outputs one of these."
            exit 1
          fi

          mkdir -p src-tauri/src

          # Tauri config for RPM build on Fedora
          cat > src-tauri/tauri.conf.json <<'JSON'
          {
            "$schema": "https://schema.tauri.app/config/2",
            "productName": "Signal",
            "version": "0.1.0",
            "identifier": "app.signalmidi.desktop",
            "build": {
              "beforeDevCommand": "npm run dev",
              "beforeBuildCommand": "npm run build"
              // No devPath or distDir here!
            },
            "app": {
              "windows": [
                { "title": "Signal", "width": 1280, "height": 800, "resizable": true }
              ],
              "security": {
                "csp": "default-src 'self' 'unsafe-inline' 'unsafe-eval' blob: data: filesystem: ws: wss: http: https:"
              }
            },
            "bundle": {
              "targets": ["rpm"],
              "icon": [],
              "linux": {
                "rpm": {
                  "depends": [
                    "webkit2gtk4.1",
                    "libappindicator-gtk3",
                    "librsvg2",
                    "openssl"
                  ]
                }
              }
            }
          }
          JSON

          # Cargo.toml
          cat > src-tauri/Cargo.toml <<'TOML'
          [package]
          name = "signal-tauri"
          version = "0.1.0"
          description = "Signal MIDI Editor (Tauri wrapper)"
          edition = "2021"

          [build-dependencies]
          tauri-build = "2"

          [dependencies]
          tauri = { version = "2", features = ["protocol-asset"] }
          serde = { version = "1", features = ["derive"] }
          serde_json = "1"

          [profile.release]
          lto = true
          codegen-units = 1
          strip = "symbols"
          TOML

          # main.rs
          cat > src-tauri/src/main.rs <<'RS'
          fn main() {
              tauri::Builder::default()
                  .run(tauri::generate_context!())
                  .expect("error while running tauri application");
          }
          RS

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            /github/home/.cargo/registry
            /github/home/.cargo/git
            src-tauri/target
          key: cargo-fedora-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            cargo-fedora-

      - name: Build Tauri (RPM)
        run: npx @tauri-apps/cli@latest build
        env:
          TAURI_BUILD_ENVIRONMENT: production

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-linux-rpm
          path: src-tauri/target/release/bundle/rpm/*.rpm
          if-no-files-found: warn
          retention-days: 14

  release:
    name: Create GitHub Release (optional)
    if: ${{ inputs.create_release == true }}
    needs:
      - ubuntu-appimage-deb
      - fedora-rpm
    runs-on: ubuntu-latest

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display downloaded files
        run: find dist -type f -maxdepth 3 -print

      - name: Determine tag and name
        id: meta
        shell: bash
        run: |
          TAG="${{ inputs.release_tag }}"
          NAME="${{ inputs.release_name }}"
          if [ -z "$TAG" ]; then
            TAG="tauri-linux-$(date -u +%Y%m%d%H%M%S)"
          fi
          if [ -z "$NAME" ]; then
            NAME="$TAG"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          draft: false
          prerelease: false
          files: |
            dist/tauri-linux-ubuntu/*.AppImage
            dist/tauri-linux-ubuntu/*.deb
            dist/tauri-linux-rpm/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
