name: Build Tauri Linux packages

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create a GitHub Release and attach the built artifacts"
        required: false
        default: false
        type: boolean
      release_tag:
        description: "Release tag (only used if create_release is true). Example: v0.1.0"
        required: false
        type: string
      release_name:
        description: "Release name (optional; defaults to tag or autogenerated)"
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: tauri-linux-${{ github.ref }}
  cancel-in-progress: false

env:
  CI: true

jobs:
  ubuntu-appimage-deb:
    name: Build AppImage and DEB (Ubuntu)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Tauri project exists
        shell: bash
        run: |
          if [ ! -d "src-tauri" ]; then
            echo "::error::Tauri project folder 'src-tauri' not found. Make sure you've added Tauri to this repo (npx tauri init) before running CI."
            exit 1
          fi

      - name: Install system dependencies (Ubuntu)
        shell: bash
        run: |
          set -eux
          sudo apt-get update
          # Try WebKitGTK 4.1 first (Ubuntu 24.04), fall back to 4.0 (22.04)
          sudo apt-get install -y \
            build-essential pkg-config libssl-dev librsvg2-dev patchelf \
            libayatana-appindicator3-dev || true
          if sudo apt-get install -y libwebkit2gtk-4.1-dev; then
            echo "Installed libwebkit2gtk-4.1-dev"
          else
            echo "Falling back to libwebkit2gtk-4.0-dev"
            sudo apt-get install -y libwebkit2gtk-4.0-dev
          fi
          # Fallback to old appindicator if ayatana package was unavailable
          if ! dpkg -s libayatana-appindicator3-dev >/dev/null 2>&1; then
            sudo apt-get install -y libappindicator3-dev || true
          fi

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true

      - name: Enable Corepack (Yarn/Pnpm)
        run: corepack enable

      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          set -eux
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "install=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=pnpm build" >> $GITHUB_OUTPUT
            echo "cache=pnpm" >> $GITHUB_OUTPUT
            corepack prepare pnpm@latest --activate
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "install=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=yarn build" >> $GITHUB_OUTPUT
            echo "cache=yarn" >> $GITHUB_OUTPUT
            corepack prepare yarn@stable --activate
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=npm ci" >> $GITHUB_OUTPUT
            echo "build=npm run build" >> $GITHUB_OUTPUT
            echo "cache=npm" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=npm install" >> $GITHUB_OUTPUT
            echo "build=npm run build" >> $GITHUB_OUTPUT
            echo "cache=npm" >> $GITHUB_OUTPUT
          fi

      - name: Restore Node cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            ~/.pnpm-store
          key: node-${{ steps.pm.outputs.manager }}-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml', '**/yarn.lock', '**/package-lock.json') }}

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: cargo-${{ runner.os }}-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Install frontend dependencies
        run: ${{ steps.pm.outputs.install }}

      - name: Build frontend
        run: ${{ steps.pm.outputs.build }}

      - name: Build Tauri (AppImage, DEB)
        # Use npx to avoid requiring @tauri-apps/cli in package.json
        run: npx @tauri-apps/cli@latest build
        env:
          # Ensure release build for smaller binaries
          TAURI_BUILD_ENVIRONMENT: production

      - name: Upload AppImage and DEB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-linux-ubuntu
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
          if-no-files-found: warn
          retention-days: 14

  fedora-rpm:
    name: Build RPM (Fedora container)
    runs-on: ubuntu-latest
    container:
      image: registry.fedoraproject.org/fedora:40

    steps:
      - name: Install base tools (Fedora)
        run: |
          dnf -y upgrade --refresh
          dnf -y groupinstall "Development Tools"
          dnf -y install \
            git curl ca-certificates bash which findutils \
            webkit2gtk4.1-devel libappindicator-gtk3-devel librsvg2-devel openssl-devel \
            rpm-build rpmdevtools pkgconfig

      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Tauri project exists
        shell: bash
        run: |
          if [ ! -d "src-tauri" ]; then
            echo "::error::Tauri project folder 'src-tauri' not found. Make sure you've added Tauri to this repo (npx tauri init) before running CI."
            exit 1
          fi

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true

      - name: Enable Corepack (Yarn/Pnpm)
        run: corepack enable

      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          set -eux
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "install=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=pnpm build" >> $GITHUB_OUTPUT
            corepack prepare pnpm@latest --activate
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "install=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=yarn build" >> $GITHUB_OUTPUT
            corepack prepare yarn@stable --activate
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=npm ci" >> $GITHUB_OUTPUT
            echo "build=npm run build" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=npm install" >> $GITHUB_OUTPUT
            echo "build=npm run build" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            /github/home/.cargo/registry
            /github/home/.cargo/git
            src-tauri/target
          key: cargo-fedora-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            cargo-fedora-

      - name: Install frontend dependencies
        run: ${{ steps.pm.outputs.install }}

      - name: Build frontend
        run: ${{ steps.pm.outputs.build }}

      - name: Build Tauri (RPM)
        run: npx @tauri-apps/cli@latest build
        env:
          TAURI_BUILD_ENVIRONMENT: production

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-linux-rpm
          path: src-tauri/target/release/bundle/rpm/*.rpm
          if-no-files-found: warn
          retention-days: 14

  release:
    name: Create GitHub Release (optional)
    if: ${{ inputs.create_release == true }}
    needs:
      - ubuntu-appimage-deb
      - fedora-rpm
    runs-on: ubuntu-latest

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display downloaded files
        run: find dist -type f -maxdepth 3 -print

      - name: Determine tag and name
        id: meta
        shell: bash
        run: |
          TAG="${{ inputs.release_tag }}"
          NAME="${{ inputs.release_name }}"
          if [ -z "$TAG" ]; then
            # Auto-generate a tag if none provided
            TAG="tauri-linux-$(date -u +%Y%m%d%H%M%S)"
          fi
          if [ -z "$NAME" ]; then
            NAME="$TAG"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          draft: false
          prerelease: false
          files: |
            dist/tauri-linux-ubuntu/*.AppImage
            dist/tauri-linux-ubuntu/*.deb
            dist/tauri-linux-rpm/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
